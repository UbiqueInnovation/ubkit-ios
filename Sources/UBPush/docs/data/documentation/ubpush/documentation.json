{"primaryContentSections":[{"kind":"content","content":[{"anchor":"Usage","level":2,"type":"heading","text":"Usage"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Clients should customize the following components specific to the client application:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"pushRegistrationManager"},{"type":"text","text":", which handles registration of push tokens on our server"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"additionalPushRegistrationManagers"},{"type":"text","text":", allows to handle several push configurations on our server"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"pushHandler"},{"type":"text","text":", which handles incoming pushes"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following methods need to be added to the AppDelegate:"}]},{"type":"codeListing","syntax":"swift","code":[""," import UBFoundationPush",""," @UIApplicationMain"," class AppDelegate: UIResponder, UIApplicationDelegate, UBPushRegistrationAppDelegate {","","     func application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplicationLaunchOptionsKey: Any]?) ->ol {","         let pushHandler = SubclassedPushHandler()","         \/\/ Only use this initializer if using default registration API, otherwise","         \/\/ also subclass UBPushRegistrationManager","         let registrationManager = UBPushRegistrationManager(registrationURL: someUrl)","         UBPushManager.shared.application(application,","                                          didFinishLaunchingWithOptions: launchOptions,","                                          pushHandler: pushHandler,","                                          pushRegistrationManager: pushRegistrationManager)","     }","","     func application(_: UIApplication, didRegisterForRemoteNotificationsWithDeviceToken deviceToken: Data) {","           UBPushManager.shared.didRegisterForRemoteNotificationsWithDeviceToken(deviceToken)","     }","","     func application(_: UIApplication, didFailToRegisterForRemoteNotificationsWithError error: Error) {","           UBPushManager.shared.didFailToRegisterForRemoteNotifications(with: error)","     }","","     func application(_: UIApplication, didReceiveRemoteNotification userInfo: [AnyHashable: Any], fetchCompletionHandler completionHandler:scaping (UIBackgroundFetchResult) -> Void) {","         UBPushManager.shared.pushHandler.handleDidReceiveResponse(userInfo, fetchCompletionHandler: completionHandler)","     }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Example of subclassing UBPushHandler:"}]},{"type":"codeListing","syntax":"swift","code":["class SubclassedPushHandler: UBPushHandler {","    \/\/ MARK: - Notification Categories","","    private let checkoutAction = UNNotificationAction(identifier: NotificationActionIdentifier.checkout.rawValue,","                                                      title: UBLocalized.booking_detail_dropin_check_out_button)","    private lazy var checkoutCategory = UNNotificationCategory(identifier: NotificationCategoryIdentifier.checkout.rawValue,","                                                               actions: [checkoutAction],","                                                               intentIdentifiers: [],","                                                               options: [])","","    override var notificationCategories: Set<UNNotificationCategory> {","        return Set([checkoutCategory])","    }","","","    \/\/ MARK: - Push handling","","    override func showInAppPushDetails(for notification: UBPushNotification) {","        handleNotification(notification)","    }","","    override func showInAppPushAlert(withTitle title: String, proposedMessage message: String, notification: UBPushNotification, shouldPresentCompletionHandler: ((UNNotificationPresentationOptions) -> Void)? = nil) {","        shouldPresentCompletionHandler?([.banner, .sound])","        handleNotification(notification)","    }","","    private func handleNotification(_ notification: UBPushNotification) {","       \/\/ Handle notification","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Clients can either create a pushRegistrationManager with a "},{"type":"codeVoice","code":"registrationUrl"}]},{"type":"codeListing","syntax":"swift","code":["     let registrationManager = UBPushRegistrationManager(registrationUrl: registrationUrl)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"or subclass "},{"type":"codeVoice","code":"UBPushRegistrationManager"},{"type":"text","text":", overriding "},{"type":"codeVoice","code":"pushRegistrationRequest"},{"type":"text","text":" if they require a custom registration request."}]},{"type":"codeListing","syntax":"swift","code":["class PushRegistrationManager: UBPushRegistrationManager {","    override var pushRegistrationRequest: UBURLRequest? {","        \/\/ return URLRequest for push registration","    }","}",""]}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"sections":[],"variants":[{"paths":["\/documentation\/ubpush\/documentation"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/UBPush\/documentation\/UBPush\/Documentation","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"The push module is a wrapper to facilitate using Appleâ€™s push capabilities."}],"kind":"article","metadata":{"roleHeading":"Article","title":"UBPush","role":"article","modules":[{"name":"UBPush"}]},"hierarchy":{"paths":[["doc:\/\/UBPush\/documentation\/UBPush"]]},"references":{"doc://UBPush/documentation/UBPush":{"role":"collection","title":"UBPush","abstract":[],"identifier":"doc:\/\/UBPush\/documentation\/UBPush","kind":"symbol","type":"topic","url":"\/documentation\/ubpush"}}}